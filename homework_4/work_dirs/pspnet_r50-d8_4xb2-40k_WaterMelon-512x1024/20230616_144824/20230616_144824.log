2023/06/16 14:48:26 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.16 (default, Mar  2 2023, 03:18:16) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 684865351
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: None
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.36.32532 版
    GCC: n/a
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/16 14:48:26 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 1024)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'WaterMelondataset'
data_root = 'data/Watermelon87_Semantic_Seg_Mask/'
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='WaterMelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WaterMelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WaterMelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=40000, val_interval=4000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=4000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
launcher = 'none'
work_dir = './work_dirs\\pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024'

2023/06/16 14:48:27 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/16 14:48:27 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/16 14:48:31 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/16 14:48:32 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/16 14:48:32 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/16 14:48:52 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([19, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([19, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/16 14:48:53 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/16 14:48:53 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/16 14:48:53 - mmengine - INFO - Checkpoints will be saved to D:\code\python\mmsegmentation-main\work_dirs\pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024.
2023/06/16 14:49:01 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_144824
2023/06/16 14:49:01 - mmengine - INFO - Iter(train) [   23/40000]  lr: 9.9951e-03  eta: 4:04:24  time: 0.1692  data_time: 0.0021  memory: 18586  loss: 1.2239  decode.loss_ce: 0.7945  decode.acc_seg: 76.9716  aux.loss_ce: 0.4295  aux.acc_seg: 70.7604
2023/06/16 14:49:05 - mmengine - INFO - Iter(train) [   50/40000]  lr: 9.9891e-03  eta: 2:52:52  time: 0.1672  data_time: 0.0021  memory: 5930  loss: 0.9464  decode.loss_ce: 0.6590  decode.acc_seg: 83.6812  aux.loss_ce: 0.2874  aux.acc_seg: 86.8915
2023/06/16 14:49:14 - mmengine - INFO - Iter(train) [  100/40000]  lr: 9.9779e-03  eta: 2:22:06  time: 0.1667  data_time: 0.0021  memory: 5930  loss: 0.9841  decode.loss_ce: 0.6957  decode.acc_seg: 82.4817  aux.loss_ce: 0.2884  aux.acc_seg: 63.8901
2023/06/16 14:49:22 - mmengine - INFO - Iter(train) [  150/40000]  lr: 9.9668e-03  eta: 2:12:00  time: 0.1681  data_time: 0.0024  memory: 5930  loss: 0.9720  decode.loss_ce: 0.6975  decode.acc_seg: 68.2947  aux.loss_ce: 0.2745  aux.acc_seg: 67.0041
2023/06/16 14:49:31 - mmengine - INFO - Iter(train) [  200/40000]  lr: 9.9557e-03  eta: 2:06:50  time: 0.1687  data_time: 0.0021  memory: 5930  loss: 0.8260  decode.loss_ce: 0.5982  decode.acc_seg: 66.6820  aux.loss_ce: 0.2277  aux.acc_seg: 71.1874
2023/06/16 14:49:39 - mmengine - INFO - Iter(train) [  250/40000]  lr: 9.9445e-03  eta: 2:03:32  time: 0.1663  data_time: 0.0019  memory: 5930  loss: 0.9328  decode.loss_ce: 0.6810  decode.acc_seg: 82.6839  aux.loss_ce: 0.2518  aux.acc_seg: 80.7870
2023/06/16 14:49:48 - mmengine - INFO - Iter(train) [  300/40000]  lr: 9.9334e-03  eta: 2:01:38  time: 0.1738  data_time: 0.0022  memory: 5930  loss: 0.7021  decode.loss_ce: 0.5079  decode.acc_seg: 83.1041  aux.loss_ce: 0.1942  aux.acc_seg: 84.6459
2023/06/16 14:49:56 - mmengine - INFO - Iter(train) [  350/40000]  lr: 9.9222e-03  eta: 2:00:11  time: 0.1676  data_time: 0.0022  memory: 5930  loss: 0.7242  decode.loss_ce: 0.5096  decode.acc_seg: 68.8342  aux.loss_ce: 0.2147  aux.acc_seg: 60.5942
2023/06/16 14:50:05 - mmengine - INFO - Iter(train) [  400/40000]  lr: 9.9111e-03  eta: 1:59:11  time: 0.1713  data_time: 0.0032  memory: 5930  loss: 0.7116  decode.loss_ce: 0.5054  decode.acc_seg: 94.5683  aux.loss_ce: 0.2062  aux.acc_seg: 93.3700
2023/06/16 14:50:13 - mmengine - INFO - Iter(train) [  450/40000]  lr: 9.8999e-03  eta: 1:58:21  time: 0.1727  data_time: 0.0027  memory: 5930  loss: 0.4302  decode.loss_ce: 0.3089  decode.acc_seg: 81.9632  aux.loss_ce: 0.1214  aux.acc_seg: 88.5182
2023/06/16 14:50:22 - mmengine - INFO - Iter(train) [  500/40000]  lr: 9.8888e-03  eta: 1:57:26  time: 0.1669  data_time: 0.0024  memory: 5930  loss: 0.5795  decode.loss_ce: 0.3981  decode.acc_seg: 88.5620  aux.loss_ce: 0.1813  aux.acc_seg: 89.7144
2023/06/16 14:50:30 - mmengine - INFO - Iter(train) [  550/40000]  lr: 9.8776e-03  eta: 1:56:41  time: 0.1675  data_time: 0.0021  memory: 5930  loss: 0.5413  decode.loss_ce: 0.3928  decode.acc_seg: 88.3563  aux.loss_ce: 0.1485  aux.acc_seg: 88.8870
2023/06/16 14:50:39 - mmengine - INFO - Iter(train) [  600/40000]  lr: 9.8665e-03  eta: 1:56:00  time: 0.1669  data_time: 0.0022  memory: 5930  loss: 0.5202  decode.loss_ce: 0.3676  decode.acc_seg: 89.8055  aux.loss_ce: 0.1526  aux.acc_seg: 94.7856
2023/06/16 14:50:47 - mmengine - INFO - Iter(train) [  650/40000]  lr: 9.8553e-03  eta: 1:55:24  time: 0.1669  data_time: 0.0025  memory: 5930  loss: 0.4667  decode.loss_ce: 0.3189  decode.acc_seg: 94.3526  aux.loss_ce: 0.1478  aux.acc_seg: 94.1552
2023/06/16 14:50:55 - mmengine - INFO - Iter(train) [  700/40000]  lr: 9.8442e-03  eta: 1:54:54  time: 0.1678  data_time: 0.0023  memory: 5930  loss: 0.4215  decode.loss_ce: 0.2965  decode.acc_seg: 95.8631  aux.loss_ce: 0.1250  aux.acc_seg: 96.7014
2023/06/16 14:51:04 - mmengine - INFO - Iter(train) [  750/40000]  lr: 9.8330e-03  eta: 1:54:33  time: 0.1692  data_time: 0.0022  memory: 5930  loss: 0.6121  decode.loss_ce: 0.4376  decode.acc_seg: 84.7469  aux.loss_ce: 0.1745  aux.acc_seg: 83.8504
2023/06/16 14:51:12 - mmengine - INFO - Iter(train) [  800/40000]  lr: 9.8218e-03  eta: 1:54:17  time: 0.1711  data_time: 0.0023  memory: 5930  loss: 0.6125  decode.loss_ce: 0.4349  decode.acc_seg: 83.9282  aux.loss_ce: 0.1776  aux.acc_seg: 83.5648
2023/06/16 14:51:21 - mmengine - INFO - Iter(train) [  850/40000]  lr: 9.8107e-03  eta: 1:53:54  time: 0.1673  data_time: 0.0022  memory: 5930  loss: 0.5112  decode.loss_ce: 0.3560  decode.acc_seg: 88.8936  aux.loss_ce: 0.1552  aux.acc_seg: 87.8448
2023/06/16 14:51:29 - mmengine - INFO - Iter(train) [  900/40000]  lr: 9.7995e-03  eta: 1:53:33  time: 0.1673  data_time: 0.0024  memory: 5930  loss: 0.4246  decode.loss_ce: 0.3012  decode.acc_seg: 85.8661  aux.loss_ce: 0.1234  aux.acc_seg: 82.9673
2023/06/16 14:51:38 - mmengine - INFO - Iter(train) [  950/40000]  lr: 9.7884e-03  eta: 1:53:15  time: 0.1694  data_time: 0.0024  memory: 5930  loss: 0.5120  decode.loss_ce: 0.3614  decode.acc_seg: 87.9369  aux.loss_ce: 0.1506  aux.acc_seg: 86.0946
2023/06/16 14:51:46 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_144824
2023/06/16 14:51:46 - mmengine - INFO - Iter(train) [ 1000/40000]  lr: 9.7772e-03  eta: 1:52:58  time: 0.1698  data_time: 0.0021  memory: 5930  loss: 0.6438  decode.loss_ce: 0.4495  decode.acc_seg: 54.6547  aux.loss_ce: 0.1943  aux.acc_seg: 55.7806
2023/06/16 14:51:55 - mmengine - INFO - Iter(train) [ 1050/40000]  lr: 9.7660e-03  eta: 1:52:40  time: 0.1677  data_time: 0.0024  memory: 5930  loss: 0.3998  decode.loss_ce: 0.2746  decode.acc_seg: 94.9836  aux.loss_ce: 0.1252  aux.acc_seg: 95.1216
2023/06/16 14:52:03 - mmengine - INFO - Iter(train) [ 1100/40000]  lr: 9.7549e-03  eta: 1:52:24  time: 0.1681  data_time: 0.0022  memory: 5930  loss: 0.5825  decode.loss_ce: 0.4106  decode.acc_seg: 93.0091  aux.loss_ce: 0.1719  aux.acc_seg: 87.3954
2023/06/16 14:52:12 - mmengine - INFO - Iter(train) [ 1150/40000]  lr: 9.7437e-03  eta: 1:52:07  time: 0.1682  data_time: 0.0023  memory: 5930  loss: 0.5816  decode.loss_ce: 0.4113  decode.acc_seg: 82.3957  aux.loss_ce: 0.1703  aux.acc_seg: 87.0131
2023/06/16 14:52:20 - mmengine - INFO - Iter(train) [ 1200/40000]  lr: 9.7325e-03  eta: 1:51:51  time: 0.1684  data_time: 0.0021  memory: 5930  loss: 0.3376  decode.loss_ce: 0.2381  decode.acc_seg: 97.4592  aux.loss_ce: 0.0995  aux.acc_seg: 97.1335
2023/06/16 14:52:29 - mmengine - INFO - Iter(train) [ 1250/40000]  lr: 9.7213e-03  eta: 1:51:37  time: 0.1701  data_time: 0.0022  memory: 5930  loss: 0.5207  decode.loss_ce: 0.3635  decode.acc_seg: 90.9076  aux.loss_ce: 0.1572  aux.acc_seg: 85.4889
2023/06/16 14:52:37 - mmengine - INFO - Iter(train) [ 1300/40000]  lr: 9.7102e-03  eta: 1:51:22  time: 0.1680  data_time: 0.0022  memory: 5930  loss: 0.6075  decode.loss_ce: 0.4257  decode.acc_seg: 82.7195  aux.loss_ce: 0.1818  aux.acc_seg: 85.2078
2023/06/16 14:52:45 - mmengine - INFO - Iter(train) [ 1350/40000]  lr: 9.6990e-03  eta: 1:51:08  time: 0.1675  data_time: 0.0022  memory: 5930  loss: 0.5016  decode.loss_ce: 0.3410  decode.acc_seg: 95.3142  aux.loss_ce: 0.1605  aux.acc_seg: 91.7960
2023/06/16 14:52:54 - mmengine - INFO - Iter(train) [ 1400/40000]  lr: 9.6878e-03  eta: 1:50:54  time: 0.1678  data_time: 0.0022  memory: 5930  loss: 0.4641  decode.loss_ce: 0.3269  decode.acc_seg: 80.6722  aux.loss_ce: 0.1371  aux.acc_seg: 74.6555
2023/06/16 14:53:02 - mmengine - INFO - Iter(train) [ 1450/40000]  lr: 9.6766e-03  eta: 1:50:44  time: 0.1711  data_time: 0.0022  memory: 5930  loss: 0.5545  decode.loss_ce: 0.4018  decode.acc_seg: 59.5884  aux.loss_ce: 0.1527  aux.acc_seg: 59.4851
2023/06/16 14:53:11 - mmengine - INFO - Iter(train) [ 1500/40000]  lr: 9.6655e-03  eta: 1:50:33  time: 0.1720  data_time: 0.0024  memory: 5930  loss: 0.6611  decode.loss_ce: 0.4596  decode.acc_seg: 83.7783  aux.loss_ce: 0.2015  aux.acc_seg: 75.1199
2023/06/16 14:53:19 - mmengine - INFO - Iter(train) [ 1550/40000]  lr: 9.6543e-03  eta: 1:50:21  time: 0.1689  data_time: 0.0023  memory: 5930  loss: 0.5191  decode.loss_ce: 0.3581  decode.acc_seg: 93.2883  aux.loss_ce: 0.1610  aux.acc_seg: 91.0607
2023/06/16 14:53:28 - mmengine - INFO - Iter(train) [ 1600/40000]  lr: 9.6431e-03  eta: 1:50:10  time: 0.1699  data_time: 0.0024  memory: 5930  loss: 0.3816  decode.loss_ce: 0.2544  decode.acc_seg: 79.5365  aux.loss_ce: 0.1272  aux.acc_seg: 76.9919
2023/06/16 14:53:36 - mmengine - INFO - Iter(train) [ 1650/40000]  lr: 9.6319e-03  eta: 1:49:58  time: 0.1674  data_time: 0.0021  memory: 5930  loss: 0.5111  decode.loss_ce: 0.3481  decode.acc_seg: 94.4114  aux.loss_ce: 0.1629  aux.acc_seg: 92.7791
2023/06/16 14:53:45 - mmengine - INFO - Iter(train) [ 1700/40000]  lr: 9.6207e-03  eta: 1:49:45  time: 0.1673  data_time: 0.0022  memory: 5930  loss: 0.4850  decode.loss_ce: 0.3397  decode.acc_seg: 93.1246  aux.loss_ce: 0.1454  aux.acc_seg: 91.4424
2023/06/16 14:53:53 - mmengine - INFO - Iter(train) [ 1750/40000]  lr: 9.6095e-03  eta: 1:49:32  time: 0.1679  data_time: 0.0024  memory: 5930  loss: 0.4162  decode.loss_ce: 0.2840  decode.acc_seg: 92.8822  aux.loss_ce: 0.1322  aux.acc_seg: 93.8226
2023/06/16 14:54:02 - mmengine - INFO - Iter(train) [ 1800/40000]  lr: 9.5983e-03  eta: 1:49:21  time: 0.1705  data_time: 0.0022  memory: 5930  loss: 0.3055  decode.loss_ce: 0.2121  decode.acc_seg: 94.5207  aux.loss_ce: 0.0934  aux.acc_seg: 96.2277
2023/06/16 14:54:10 - mmengine - INFO - Iter(train) [ 1850/40000]  lr: 9.5872e-03  eta: 1:49:08  time: 0.1677  data_time: 0.0021  memory: 5930  loss: 0.5104  decode.loss_ce: 0.3501  decode.acc_seg: 89.6107  aux.loss_ce: 0.1603  aux.acc_seg: 91.7182
2023/06/16 14:54:19 - mmengine - INFO - Iter(train) [ 1900/40000]  lr: 9.5760e-03  eta: 1:48:56  time: 0.1676  data_time: 0.0023  memory: 5930  loss: 0.3212  decode.loss_ce: 0.2214  decode.acc_seg: 92.9309  aux.loss_ce: 0.0998  aux.acc_seg: 92.7854
2023/06/16 14:54:27 - mmengine - INFO - Iter(train) [ 1950/40000]  lr: 9.5648e-03  eta: 1:48:45  time: 0.1680  data_time: 0.0023  memory: 5930  loss: 0.4640  decode.loss_ce: 0.3270  decode.acc_seg: 91.0118  aux.loss_ce: 0.1370  aux.acc_seg: 93.1115
2023/06/16 14:54:35 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_144824
2023/06/16 14:54:35 - mmengine - INFO - Iter(train) [ 2000/40000]  lr: 9.5536e-03  eta: 1:48:33  time: 0.1677  data_time: 0.0021  memory: 5930  loss: 0.5427  decode.loss_ce: 0.3757  decode.acc_seg: 90.3035  aux.loss_ce: 0.1670  aux.acc_seg: 89.9791
2023/06/16 14:54:44 - mmengine - INFO - Iter(train) [ 2050/40000]  lr: 9.5424e-03  eta: 1:48:21  time: 0.1685  data_time: 0.0024  memory: 5930  loss: 0.3691  decode.loss_ce: 0.2578  decode.acc_seg: 91.0673  aux.loss_ce: 0.1113  aux.acc_seg: 91.4838
2023/06/16 14:54:52 - mmengine - INFO - Iter(train) [ 2100/40000]  lr: 9.5312e-03  eta: 1:48:10  time: 0.1676  data_time: 0.0020  memory: 5930  loss: 0.6302  decode.loss_ce: 0.4374  decode.acc_seg: 82.9170  aux.loss_ce: 0.1928  aux.acc_seg: 78.7496
2023/06/16 14:55:01 - mmengine - INFO - Iter(train) [ 2150/40000]  lr: 9.5200e-03  eta: 1:47:59  time: 0.1695  data_time: 0.0022  memory: 5930  loss: 0.3349  decode.loss_ce: 0.2396  decode.acc_seg: 96.5186  aux.loss_ce: 0.0952  aux.acc_seg: 94.7672
2023/06/16 14:55:09 - mmengine - INFO - Iter(train) [ 2200/40000]  lr: 9.5088e-03  eta: 1:47:47  time: 0.1669  data_time: 0.0021  memory: 5930  loss: 0.3214  decode.loss_ce: 0.2188  decode.acc_seg: 94.8606  aux.loss_ce: 0.1025  aux.acc_seg: 93.8784
2023/06/16 14:55:17 - mmengine - INFO - Iter(train) [ 2250/40000]  lr: 9.4976e-03  eta: 1:47:36  time: 0.1678  data_time: 0.0023  memory: 5930  loss: 0.2749  decode.loss_ce: 0.1868  decode.acc_seg: 95.5512  aux.loss_ce: 0.0882  aux.acc_seg: 93.8955
2023/06/16 14:55:26 - mmengine - INFO - Iter(train) [ 2300/40000]  lr: 9.4864e-03  eta: 1:47:25  time: 0.1675  data_time: 0.0021  memory: 5930  loss: 0.6186  decode.loss_ce: 0.4206  decode.acc_seg: 85.7894  aux.loss_ce: 0.1980  aux.acc_seg: 87.1735
2023/06/16 14:55:34 - mmengine - INFO - Iter(train) [ 2350/40000]  lr: 9.4752e-03  eta: 1:47:15  time: 0.1673  data_time: 0.0021  memory: 5930  loss: 0.3522  decode.loss_ce: 0.2400  decode.acc_seg: 97.4041  aux.loss_ce: 0.1122  aux.acc_seg: 96.9858
2023/06/16 14:55:43 - mmengine - INFO - Iter(train) [ 2400/40000]  lr: 9.4640e-03  eta: 1:47:04  time: 0.1672  data_time: 0.0022  memory: 5930  loss: 0.2628  decode.loss_ce: 0.1816  decode.acc_seg: 95.4300  aux.loss_ce: 0.0812  aux.acc_seg: 94.7863
2023/06/16 14:55:51 - mmengine - INFO - Iter(train) [ 2450/40000]  lr: 9.4528e-03  eta: 1:46:53  time: 0.1675  data_time: 0.0022  memory: 5930  loss: 0.3269  decode.loss_ce: 0.2226  decode.acc_seg: 95.3689  aux.loss_ce: 0.1043  aux.acc_seg: 91.8688
2023/06/16 14:55:59 - mmengine - INFO - Iter(train) [ 2500/40000]  lr: 9.4416e-03  eta: 1:46:43  time: 0.1679  data_time: 0.0021  memory: 5930  loss: 0.3809  decode.loss_ce: 0.2694  decode.acc_seg: 96.4953  aux.loss_ce: 0.1115  aux.acc_seg: 95.8658
2023/06/16 14:56:08 - mmengine - INFO - Iter(train) [ 2550/40000]  lr: 9.4303e-03  eta: 1:46:32  time: 0.1671  data_time: 0.0024  memory: 5930  loss: 0.3197  decode.loss_ce: 0.2279  decode.acc_seg: 84.8854  aux.loss_ce: 0.0918  aux.acc_seg: 82.8116
2023/06/16 14:56:16 - mmengine - INFO - Iter(train) [ 2600/40000]  lr: 9.4191e-03  eta: 1:46:22  time: 0.1674  data_time: 0.0021  memory: 5930  loss: 0.2836  decode.loss_ce: 0.1907  decode.acc_seg: 97.1260  aux.loss_ce: 0.0928  aux.acc_seg: 96.0722
2023/06/16 14:56:25 - mmengine - INFO - Iter(train) [ 2650/40000]  lr: 9.4079e-03  eta: 1:46:11  time: 0.1679  data_time: 0.0022  memory: 5930  loss: 0.3184  decode.loss_ce: 0.2186  decode.acc_seg: 94.8852  aux.loss_ce: 0.0998  aux.acc_seg: 93.6239
2023/06/16 14:56:33 - mmengine - INFO - Iter(train) [ 2700/40000]  lr: 9.3967e-03  eta: 1:46:01  time: 0.1677  data_time: 0.0021  memory: 5930  loss: 0.2741  decode.loss_ce: 0.1896  decode.acc_seg: 94.4442  aux.loss_ce: 0.0844  aux.acc_seg: 93.4554
2023/06/16 14:56:41 - mmengine - INFO - Iter(train) [ 2750/40000]  lr: 9.3855e-03  eta: 1:45:50  time: 0.1671  data_time: 0.0019  memory: 5930  loss: 0.4213  decode.loss_ce: 0.3020  decode.acc_seg: 92.0813  aux.loss_ce: 0.1193  aux.acc_seg: 91.4560
2023/06/16 14:56:50 - mmengine - INFO - Iter(train) [ 2800/40000]  lr: 9.3743e-03  eta: 1:45:40  time: 0.1681  data_time: 0.0021  memory: 5930  loss: 0.2616  decode.loss_ce: 0.1828  decode.acc_seg: 92.9313  aux.loss_ce: 0.0788  aux.acc_seg: 91.1771
2023/06/16 14:56:58 - mmengine - INFO - Iter(train) [ 2850/40000]  lr: 9.3630e-03  eta: 1:45:30  time: 0.1670  data_time: 0.0021  memory: 5930  loss: 0.2775  decode.loss_ce: 0.1888  decode.acc_seg: 96.0182  aux.loss_ce: 0.0886  aux.acc_seg: 95.6139
2023/06/16 14:57:07 - mmengine - INFO - Iter(train) [ 2900/40000]  lr: 9.3518e-03  eta: 1:45:20  time: 0.1677  data_time: 0.0023  memory: 5930  loss: 0.3625  decode.loss_ce: 0.2278  decode.acc_seg: 84.7409  aux.loss_ce: 0.1348  aux.acc_seg: 67.1450
2023/06/16 14:57:15 - mmengine - INFO - Iter(train) [ 2950/40000]  lr: 9.3406e-03  eta: 1:45:10  time: 0.1670  data_time: 0.0024  memory: 5930  loss: 0.4676  decode.loss_ce: 0.3214  decode.acc_seg: 97.1767  aux.loss_ce: 0.1462  aux.acc_seg: 96.6353
2023/06/16 14:57:23 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_144824
2023/06/16 14:57:23 - mmengine - INFO - Iter(train) [ 3000/40000]  lr: 9.3294e-03  eta: 1:45:00  time: 0.1668  data_time: 0.0021  memory: 5930  loss: 0.2991  decode.loss_ce: 0.2012  decode.acc_seg: 93.9421  aux.loss_ce: 0.0980  aux.acc_seg: 93.4600
2023/06/16 14:57:32 - mmengine - INFO - Iter(train) [ 3050/40000]  lr: 9.3182e-03  eta: 1:44:51  time: 0.1713  data_time: 0.0021  memory: 5930  loss: 0.4458  decode.loss_ce: 0.3155  decode.acc_seg: 71.0548  aux.loss_ce: 0.1303  aux.acc_seg: 71.2373
2023/06/16 14:57:40 - mmengine - INFO - Iter(train) [ 3100/40000]  lr: 9.3069e-03  eta: 1:44:41  time: 0.1674  data_time: 0.0023  memory: 5930  loss: 0.2633  decode.loss_ce: 0.1816  decode.acc_seg: 94.0471  aux.loss_ce: 0.0817  aux.acc_seg: 95.3169
2023/06/16 14:57:49 - mmengine - INFO - Iter(train) [ 3150/40000]  lr: 9.2957e-03  eta: 1:44:32  time: 0.1684  data_time: 0.0026  memory: 5930  loss: 0.3822  decode.loss_ce: 0.2596  decode.acc_seg: 88.4938  aux.loss_ce: 0.1226  aux.acc_seg: 74.9511
2023/06/16 14:57:57 - mmengine - INFO - Iter(train) [ 3200/40000]  lr: 9.2845e-03  eta: 1:44:22  time: 0.1678  data_time: 0.0022  memory: 5930  loss: 0.3075  decode.loss_ce: 0.2235  decode.acc_seg: 95.2133  aux.loss_ce: 0.0840  aux.acc_seg: 93.9948
2023/06/16 14:58:06 - mmengine - INFO - Iter(train) [ 3250/40000]  lr: 9.2732e-03  eta: 1:44:12  time: 0.1671  data_time: 0.0020  memory: 5930  loss: 0.2593  decode.loss_ce: 0.1730  decode.acc_seg: 96.1534  aux.loss_ce: 0.0862  aux.acc_seg: 91.4275
2023/06/16 14:58:14 - mmengine - INFO - Iter(train) [ 3300/40000]  lr: 9.2620e-03  eta: 1:44:03  time: 0.1681  data_time: 0.0024  memory: 5930  loss: 0.3304  decode.loss_ce: 0.2100  decode.acc_seg: 90.7834  aux.loss_ce: 0.1204  aux.acc_seg: 88.0467
2023/06/16 14:58:22 - mmengine - INFO - Iter(train) [ 3350/40000]  lr: 9.2508e-03  eta: 1:43:53  time: 0.1681  data_time: 0.0023  memory: 5930  loss: 0.4862  decode.loss_ce: 0.3332  decode.acc_seg: 91.6480  aux.loss_ce: 0.1530  aux.acc_seg: 87.8259
2023/06/16 14:58:31 - mmengine - INFO - Iter(train) [ 3400/40000]  lr: 9.2395e-03  eta: 1:43:43  time: 0.1672  data_time: 0.0024  memory: 5930  loss: 0.1816  decode.loss_ce: 0.1238  decode.acc_seg: 92.8195  aux.loss_ce: 0.0578  aux.acc_seg: 91.9867
2023/06/16 14:58:39 - mmengine - INFO - Iter(train) [ 3450/40000]  lr: 9.2283e-03  eta: 1:43:34  time: 0.1676  data_time: 0.0023  memory: 5930  loss: 0.4279  decode.loss_ce: 0.2937  decode.acc_seg: 96.4996  aux.loss_ce: 0.1341  aux.acc_seg: 97.5734
2023/06/16 14:58:48 - mmengine - INFO - Iter(train) [ 3500/40000]  lr: 9.2171e-03  eta: 1:43:24  time: 0.1679  data_time: 0.0023  memory: 5930  loss: 0.2505  decode.loss_ce: 0.1637  decode.acc_seg: 93.9118  aux.loss_ce: 0.0868  aux.acc_seg: 89.8848
2023/06/16 14:58:56 - mmengine - INFO - Iter(train) [ 3550/40000]  lr: 9.2058e-03  eta: 1:43:15  time: 0.1675  data_time: 0.0023  memory: 5930  loss: 0.2900  decode.loss_ce: 0.2001  decode.acc_seg: 87.4874  aux.loss_ce: 0.0899  aux.acc_seg: 85.7820
2023/06/16 14:59:04 - mmengine - INFO - Iter(train) [ 3600/40000]  lr: 9.1946e-03  eta: 1:43:06  time: 0.1671  data_time: 0.0022  memory: 5930  loss: 0.2904  decode.loss_ce: 0.1966  decode.acc_seg: 95.0502  aux.loss_ce: 0.0939  aux.acc_seg: 95.5789
2023/06/16 14:59:13 - mmengine - INFO - Iter(train) [ 3650/40000]  lr: 9.1833e-03  eta: 1:42:56  time: 0.1672  data_time: 0.0023  memory: 5930  loss: 0.2509  decode.loss_ce: 0.1671  decode.acc_seg: 87.6818  aux.loss_ce: 0.0838  aux.acc_seg: 80.5730
2023/06/16 14:59:21 - mmengine - INFO - Iter(train) [ 3700/40000]  lr: 9.1721e-03  eta: 1:42:47  time: 0.1672  data_time: 0.0022  memory: 5930  loss: 0.4365  decode.loss_ce: 0.3143  decode.acc_seg: 90.1651  aux.loss_ce: 0.1223  aux.acc_seg: 92.9193
2023/06/16 14:59:30 - mmengine - INFO - Iter(train) [ 3750/40000]  lr: 9.1608e-03  eta: 1:42:37  time: 0.1671  data_time: 0.0021  memory: 5930  loss: 0.5136  decode.loss_ce: 0.3719  decode.acc_seg: 82.4498  aux.loss_ce: 0.1417  aux.acc_seg: 79.4044
2023/06/16 14:59:38 - mmengine - INFO - Iter(train) [ 3800/40000]  lr: 9.1496e-03  eta: 1:42:28  time: 0.1680  data_time: 0.0020  memory: 5930  loss: 0.2890  decode.loss_ce: 0.1962  decode.acc_seg: 91.8657  aux.loss_ce: 0.0928  aux.acc_seg: 93.7125
2023/06/16 14:59:46 - mmengine - INFO - Iter(train) [ 3850/40000]  lr: 9.1383e-03  eta: 1:42:18  time: 0.1671  data_time: 0.0022  memory: 5930  loss: 0.3609  decode.loss_ce: 0.2371  decode.acc_seg: 83.7521  aux.loss_ce: 0.1238  aux.acc_seg: 85.1860
2023/06/16 14:59:55 - mmengine - INFO - Iter(train) [ 3900/40000]  lr: 9.1271e-03  eta: 1:42:09  time: 0.1675  data_time: 0.0021  memory: 5930  loss: 0.3597  decode.loss_ce: 0.2459  decode.acc_seg: 95.1368  aux.loss_ce: 0.1138  aux.acc_seg: 94.5323
2023/06/16 15:00:03 - mmengine - INFO - Iter(train) [ 3950/40000]  lr: 9.1158e-03  eta: 1:41:59  time: 0.1667  data_time: 0.0021  memory: 5930  loss: 0.4212  decode.loss_ce: 0.2916  decode.acc_seg: 93.8976  aux.loss_ce: 0.1296  aux.acc_seg: 91.4160
2023/06/16 15:00:12 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_144824
2023/06/16 15:00:12 - mmengine - INFO - Iter(train) [ 4000/40000]  lr: 9.1046e-03  eta: 1:41:50  time: 0.1675  data_time: 0.0024  memory: 5930  loss: 0.3062  decode.loss_ce: 0.2094  decode.acc_seg: 94.5426  aux.loss_ce: 0.0969  aux.acc_seg: 91.8374
2023/06/16 15:00:12 - mmengine - INFO - Saving checkpoint at 4000 iterations
