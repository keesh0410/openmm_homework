2023/06/16 15:15:51 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.16 (default, Mar  2 2023, 03:18:16) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 132449160
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: None
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.36.32532 版
    GCC: n/a
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/16 15:15:51 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 1024)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'WaterMelondataset'
data_root = 'data/Watermelon87_Semantic_Seg_Mask/'
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='WaterMelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WaterMelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WaterMelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = True
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=40000, val_interval=4000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=4000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
launcher = 'none'
work_dir = './work_dirs\\pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024'

2023/06/16 15:15:52 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/16 15:15:52 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/16 15:15:56 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/16 15:15:57 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/16 15:15:57 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/16 15:15:57 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([19, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([19, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/16 15:15:57 - mmengine - INFO - Auto resumed from the latest checkpoint D:\code\python\mmsegmentation-main\work_dirs\pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024\iter_4000.pth.
2023/06/16 15:15:57 - mmengine - INFO - Load checkpoint from D:\code\python\mmsegmentation-main\work_dirs\pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024\iter_4000.pth
2023/06/16 15:15:57 - mmengine - INFO - resumed epoch: 0, iter: 4000
2023/06/16 15:15:57 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/16 15:15:57 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/16 15:15:57 - mmengine - INFO - Checkpoints will be saved to D:\code\python\mmsegmentation-main\work_dirs\pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024.
2023/06/16 15:16:10 - mmengine - INFO - Iter(train) [ 4050/40000]  lr: 9.0933e-03  eta: 2:34:42  time: 0.1671  data_time: 0.0021  memory: 18780  loss: 0.2620  decode.loss_ce: 0.1722  decode.acc_seg: 97.1951  aux.loss_ce: 0.0899  aux.acc_seg: 97.1368
2023/06/16 15:16:19 - mmengine - INFO - Iter(train) [ 4100/40000]  lr: 9.0821e-03  eta: 2:07:25  time: 0.1674  data_time: 0.0024  memory: 5931  loss: 0.2781  decode.loss_ce: 0.1949  decode.acc_seg: 94.3752  aux.loss_ce: 0.0831  aux.acc_seg: 92.9392
2023/06/16 15:16:27 - mmengine - INFO - Iter(train) [ 4150/40000]  lr: 9.0708e-03  eta: 1:58:19  time: 0.1677  data_time: 0.0021  memory: 5931  loss: 0.3258  decode.loss_ce: 0.2403  decode.acc_seg: 96.8567  aux.loss_ce: 0.0855  aux.acc_seg: 96.2346
2023/06/16 15:16:36 - mmengine - INFO - Iter(train) [ 4200/40000]  lr: 9.0595e-03  eta: 1:54:03  time: 0.1695  data_time: 0.0021  memory: 5931  loss: 0.3269  decode.loss_ce: 0.2237  decode.acc_seg: 90.5108  aux.loss_ce: 0.1031  aux.acc_seg: 93.5938
2023/06/16 15:16:44 - mmengine - INFO - Iter(train) [ 4250/40000]  lr: 9.0483e-03  eta: 1:51:34  time: 0.1694  data_time: 0.0022  memory: 5930  loss: 0.3224  decode.loss_ce: 0.2096  decode.acc_seg: 88.9939  aux.loss_ce: 0.1129  aux.acc_seg: 88.0545
2023/06/16 15:16:53 - mmengine - INFO - Iter(train) [ 4300/40000]  lr: 9.0370e-03  eta: 1:49:49  time: 0.1708  data_time: 0.0022  memory: 5931  loss: 0.2404  decode.loss_ce: 0.1623  decode.acc_seg: 97.4850  aux.loss_ce: 0.0781  aux.acc_seg: 97.1570
2023/06/16 15:17:01 - mmengine - INFO - Iter(train) [ 4350/40000]  lr: 9.0257e-03  eta: 1:48:23  time: 0.1710  data_time: 0.0025  memory: 5931  loss: 0.2770  decode.loss_ce: 0.1930  decode.acc_seg: 96.0841  aux.loss_ce: 0.0840  aux.acc_seg: 93.9956
2023/06/16 15:17:10 - mmengine - INFO - Iter(train) [ 4400/40000]  lr: 9.0145e-03  eta: 1:47:23  time: 0.1679  data_time: 0.0026  memory: 5932  loss: 0.2129  decode.loss_ce: 0.1343  decode.acc_seg: 96.5245  aux.loss_ce: 0.0786  aux.acc_seg: 95.0948
2023/06/16 15:17:18 - mmengine - INFO - Iter(train) [ 4450/40000]  lr: 9.0032e-03  eta: 1:46:27  time: 0.1683  data_time: 0.0022  memory: 5932  loss: 0.2854  decode.loss_ce: 0.1972  decode.acc_seg: 96.0138  aux.loss_ce: 0.0881  aux.acc_seg: 96.0401
2023/06/16 15:17:27 - mmengine - INFO - Iter(train) [ 4500/40000]  lr: 8.9919e-03  eta: 1:45:44  time: 0.1697  data_time: 0.0020  memory: 5931  loss: 0.4926  decode.loss_ce: 0.3385  decode.acc_seg: 74.1199  aux.loss_ce: 0.1541  aux.acc_seg: 80.5630
2023/06/16 15:17:35 - mmengine - INFO - Iter(train) [ 4550/40000]  lr: 8.9807e-03  eta: 1:45:04  time: 0.1670  data_time: 0.0019  memory: 5931  loss: 0.2574  decode.loss_ce: 0.1744  decode.acc_seg: 94.7006  aux.loss_ce: 0.0830  aux.acc_seg: 93.6415
2023/06/16 15:17:44 - mmengine - INFO - Iter(train) [ 4600/40000]  lr: 8.9694e-03  eta: 1:44:31  time: 0.1720  data_time: 0.0022  memory: 5931  loss: 0.2955  decode.loss_ce: 0.2029  decode.acc_seg: 96.1405  aux.loss_ce: 0.0926  aux.acc_seg: 96.8657
2023/06/16 15:17:52 - mmengine - INFO - Iter(train) [ 4650/40000]  lr: 8.9581e-03  eta: 1:44:00  time: 0.1673  data_time: 0.0024  memory: 5931  loss: 0.3123  decode.loss_ce: 0.2149  decode.acc_seg: 94.4653  aux.loss_ce: 0.0974  aux.acc_seg: 93.4621
2023/06/16 15:18:00 - mmengine - INFO - Iter(train) [ 4700/40000]  lr: 8.9468e-03  eta: 1:43:30  time: 0.1679  data_time: 0.0022  memory: 5931  loss: 0.2868  decode.loss_ce: 0.1875  decode.acc_seg: 95.3592  aux.loss_ce: 0.0992  aux.acc_seg: 94.3993
2023/06/16 15:18:09 - mmengine - INFO - Iter(train) [ 4750/40000]  lr: 8.9356e-03  eta: 1:43:03  time: 0.1680  data_time: 0.0028  memory: 5931  loss: 0.1970  decode.loss_ce: 0.1310  decode.acc_seg: 96.2095  aux.loss_ce: 0.0661  aux.acc_seg: 95.5793
2023/06/16 15:18:17 - mmengine - INFO - Iter(train) [ 4800/40000]  lr: 8.9243e-03  eta: 1:42:38  time: 0.1680  data_time: 0.0024  memory: 5931  loss: 0.6079  decode.loss_ce: 0.4131  decode.acc_seg: 87.2359  aux.loss_ce: 0.1948  aux.acc_seg: 80.3175
2023/06/16 15:18:26 - mmengine - INFO - Iter(train) [ 4850/40000]  lr: 8.9130e-03  eta: 1:42:16  time: 0.1684  data_time: 0.0023  memory: 5931  loss: 0.2596  decode.loss_ce: 0.1782  decode.acc_seg: 97.4896  aux.loss_ce: 0.0815  aux.acc_seg: 97.2183
2023/06/16 15:18:34 - mmengine - INFO - Iter(train) [ 4900/40000]  lr: 8.9017e-03  eta: 1:41:54  time: 0.1676  data_time: 0.0022  memory: 5931  loss: 0.4006  decode.loss_ce: 0.2668  decode.acc_seg: 87.5470  aux.loss_ce: 0.1338  aux.acc_seg: 85.2471
2023/06/16 15:18:43 - mmengine - INFO - Iter(train) [ 4950/40000]  lr: 8.8904e-03  eta: 1:41:35  time: 0.1688  data_time: 0.0020  memory: 5931  loss: 0.2718  decode.loss_ce: 0.1837  decode.acc_seg: 96.9641  aux.loss_ce: 0.0881  aux.acc_seg: 96.7483
2023/06/16 15:18:51 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_151549
2023/06/16 15:18:51 - mmengine - INFO - Iter(train) [ 5000/40000]  lr: 8.8791e-03  eta: 1:41:17  time: 0.1690  data_time: 0.0027  memory: 5931  loss: 0.2567  decode.loss_ce: 0.1747  decode.acc_seg: 97.9067  aux.loss_ce: 0.0820  aux.acc_seg: 97.7400
2023/06/16 15:18:59 - mmengine - INFO - Iter(train) [ 5050/40000]  lr: 8.8679e-03  eta: 1:41:00  time: 0.1679  data_time: 0.0021  memory: 5931  loss: 0.2809  decode.loss_ce: 0.1977  decode.acc_seg: 82.7568  aux.loss_ce: 0.0832  aux.acc_seg: 85.9921
2023/06/16 15:19:08 - mmengine - INFO - Iter(train) [ 5100/40000]  lr: 8.8566e-03  eta: 1:40:43  time: 0.1681  data_time: 0.0023  memory: 5931  loss: 0.3220  decode.loss_ce: 0.2168  decode.acc_seg: 91.4728  aux.loss_ce: 0.1052  aux.acc_seg: 86.7575
2023/06/16 15:19:16 - mmengine - INFO - Iter(train) [ 5150/40000]  lr: 8.8453e-03  eta: 1:40:28  time: 0.1682  data_time: 0.0022  memory: 5931  loss: 0.3549  decode.loss_ce: 0.2424  decode.acc_seg: 95.8846  aux.loss_ce: 0.1125  aux.acc_seg: 91.7959
2023/06/16 15:19:25 - mmengine - INFO - Iter(train) [ 5200/40000]  lr: 8.8340e-03  eta: 1:40:13  time: 0.1680  data_time: 0.0019  memory: 5931  loss: 0.2821  decode.loss_ce: 0.1937  decode.acc_seg: 94.1690  aux.loss_ce: 0.0883  aux.acc_seg: 95.0344
2023/06/16 15:19:33 - mmengine - INFO - Iter(train) [ 5250/40000]  lr: 8.8227e-03  eta: 1:39:58  time: 0.1682  data_time: 0.0023  memory: 5931  loss: 0.2088  decode.loss_ce: 0.1413  decode.acc_seg: 97.8638  aux.loss_ce: 0.0675  aux.acc_seg: 97.9548
2023/06/16 15:19:42 - mmengine - INFO - Iter(train) [ 5300/40000]  lr: 8.8114e-03  eta: 1:39:45  time: 0.1690  data_time: 0.0026  memory: 5931  loss: 0.5609  decode.loss_ce: 0.3937  decode.acc_seg: 95.8412  aux.loss_ce: 0.1672  aux.acc_seg: 94.5717
2023/06/16 15:19:50 - mmengine - INFO - Iter(train) [ 5350/40000]  lr: 8.8001e-03  eta: 1:39:30  time: 0.1680  data_time: 0.0023  memory: 5931  loss: 0.2564  decode.loss_ce: 0.1656  decode.acc_seg: 89.1945  aux.loss_ce: 0.0908  aux.acc_seg: 88.9503
2023/06/16 15:19:59 - mmengine - INFO - Iter(train) [ 5400/40000]  lr: 8.7888e-03  eta: 1:39:23  time: 0.1714  data_time: 0.0024  memory: 5931  loss: 0.4375  decode.loss_ce: 0.2845  decode.acc_seg: 87.3982  aux.loss_ce: 0.1530  aux.acc_seg: 81.6316
2023/06/16 15:20:07 - mmengine - INFO - Iter(train) [ 5450/40000]  lr: 8.7775e-03  eta: 1:39:12  time: 0.1688  data_time: 0.0021  memory: 5932  loss: 0.3570  decode.loss_ce: 0.2474  decode.acc_seg: 95.6584  aux.loss_ce: 0.1096  aux.acc_seg: 94.8376
2023/06/16 15:20:16 - mmengine - INFO - Iter(train) [ 5500/40000]  lr: 8.7662e-03  eta: 1:39:02  time: 0.1718  data_time: 0.0027  memory: 5931  loss: 0.2083  decode.loss_ce: 0.1408  decode.acc_seg: 97.2067  aux.loss_ce: 0.0674  aux.acc_seg: 97.0415
2023/06/16 15:20:24 - mmengine - INFO - Iter(train) [ 5550/40000]  lr: 8.7549e-03  eta: 1:38:53  time: 0.1710  data_time: 0.0023  memory: 5931  loss: 0.3294  decode.loss_ce: 0.2191  decode.acc_seg: 93.4155  aux.loss_ce: 0.1103  aux.acc_seg: 88.6931
2023/06/16 15:20:33 - mmengine - INFO - Iter(train) [ 5600/40000]  lr: 8.7436e-03  eta: 1:38:43  time: 0.1710  data_time: 0.0021  memory: 5932  loss: 0.2660  decode.loss_ce: 0.1757  decode.acc_seg: 95.0520  aux.loss_ce: 0.0903  aux.acc_seg: 94.0727
2023/06/16 15:20:41 - mmengine - INFO - Iter(train) [ 5650/40000]  lr: 8.7323e-03  eta: 1:38:32  time: 0.1684  data_time: 0.0022  memory: 5931  loss: 0.3592  decode.loss_ce: 0.2409  decode.acc_seg: 87.8757  aux.loss_ce: 0.1184  aux.acc_seg: 88.8660
2023/06/16 15:20:50 - mmengine - INFO - Iter(train) [ 5700/40000]  lr: 8.7210e-03  eta: 1:38:20  time: 0.1678  data_time: 0.0023  memory: 5931  loss: 0.3336  decode.loss_ce: 0.2265  decode.acc_seg: 83.9142  aux.loss_ce: 0.1071  aux.acc_seg: 79.7307
2023/06/16 15:20:58 - mmengine - INFO - Iter(train) [ 5750/40000]  lr: 8.7096e-03  eta: 1:38:08  time: 0.1682  data_time: 0.0025  memory: 5931  loss: 0.5472  decode.loss_ce: 0.3867  decode.acc_seg: 48.5914  aux.loss_ce: 0.1605  aux.acc_seg: 62.3489
2023/06/16 15:21:07 - mmengine - INFO - Iter(train) [ 5800/40000]  lr: 8.6983e-03  eta: 1:37:57  time: 0.1686  data_time: 0.0025  memory: 5931  loss: 0.2685  decode.loss_ce: 0.1752  decode.acc_seg: 96.7790  aux.loss_ce: 0.0933  aux.acc_seg: 97.6876
2023/06/16 15:21:15 - mmengine - INFO - Iter(train) [ 5850/40000]  lr: 8.6870e-03  eta: 1:37:46  time: 0.1677  data_time: 0.0023  memory: 5931  loss: 0.2408  decode.loss_ce: 0.1613  decode.acc_seg: 97.3867  aux.loss_ce: 0.0795  aux.acc_seg: 94.8833
2023/06/16 15:21:24 - mmengine - INFO - Iter(train) [ 5900/40000]  lr: 8.6757e-03  eta: 1:37:35  time: 0.1699  data_time: 0.0022  memory: 5931  loss: 0.2629  decode.loss_ce: 0.1777  decode.acc_seg: 99.1132  aux.loss_ce: 0.0852  aux.acc_seg: 99.0102
2023/06/16 15:21:32 - mmengine - INFO - Iter(train) [ 5950/40000]  lr: 8.6644e-03  eta: 1:37:29  time: 0.1756  data_time: 0.0022  memory: 5931  loss: 0.2104  decode.loss_ce: 0.1451  decode.acc_seg: 95.3225  aux.loss_ce: 0.0653  aux.acc_seg: 93.5873
2023/06/16 15:21:41 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_151549
2023/06/16 15:21:41 - mmengine - INFO - Iter(train) [ 6000/40000]  lr: 8.6531e-03  eta: 1:37:23  time: 0.1776  data_time: 0.0027  memory: 5931  loss: 0.3027  decode.loss_ce: 0.1912  decode.acc_seg: 96.6422  aux.loss_ce: 0.1115  aux.acc_seg: 96.2470
2023/06/16 15:21:50 - mmengine - INFO - Iter(train) [ 6050/40000]  lr: 8.6417e-03  eta: 1:37:17  time: 0.1751  data_time: 0.0024  memory: 5931  loss: 0.2113  decode.loss_ce: 0.1360  decode.acc_seg: 95.7674  aux.loss_ce: 0.0753  aux.acc_seg: 94.3358
2023/06/16 15:21:58 - mmengine - INFO - Iter(train) [ 6100/40000]  lr: 8.6304e-03  eta: 1:37:07  time: 0.1681  data_time: 0.0023  memory: 5931  loss: 0.2236  decode.loss_ce: 0.1519  decode.acc_seg: 95.7481  aux.loss_ce: 0.0717  aux.acc_seg: 95.0220
2023/06/16 15:22:07 - mmengine - INFO - Iter(train) [ 6150/40000]  lr: 8.6191e-03  eta: 1:36:57  time: 0.1681  data_time: 0.0024  memory: 5931  loss: 0.2018  decode.loss_ce: 0.1278  decode.acc_seg: 97.1093  aux.loss_ce: 0.0741  aux.acc_seg: 95.6980
2023/06/16 15:22:15 - mmengine - INFO - Iter(train) [ 6200/40000]  lr: 8.6078e-03  eta: 1:36:45  time: 0.1679  data_time: 0.0021  memory: 5931  loss: 0.3155  decode.loss_ce: 0.2197  decode.acc_seg: 96.0192  aux.loss_ce: 0.0958  aux.acc_seg: 95.0257
2023/06/16 15:22:24 - mmengine - INFO - Iter(train) [ 6250/40000]  lr: 8.5964e-03  eta: 1:36:34  time: 0.1675  data_time: 0.0025  memory: 5931  loss: 0.2948  decode.loss_ce: 0.1926  decode.acc_seg: 94.2191  aux.loss_ce: 0.1023  aux.acc_seg: 81.8657
2023/06/16 15:22:32 - mmengine - INFO - Iter(train) [ 6300/40000]  lr: 8.5851e-03  eta: 1:36:23  time: 0.1673  data_time: 0.0023  memory: 5931  loss: 0.1598  decode.loss_ce: 0.1044  decode.acc_seg: 96.1843  aux.loss_ce: 0.0553  aux.acc_seg: 96.4106
2023/06/16 15:22:40 - mmengine - INFO - Iter(train) [ 6350/40000]  lr: 8.5738e-03  eta: 1:36:12  time: 0.1673  data_time: 0.0020  memory: 5931  loss: 0.3001  decode.loss_ce: 0.2055  decode.acc_seg: 96.8478  aux.loss_ce: 0.0946  aux.acc_seg: 87.2904
2023/06/16 15:22:49 - mmengine - INFO - Iter(train) [ 6400/40000]  lr: 8.5625e-03  eta: 1:36:01  time: 0.1675  data_time: 0.0023  memory: 5931  loss: 0.1482  decode.loss_ce: 0.1012  decode.acc_seg: 89.1095  aux.loss_ce: 0.0470  aux.acc_seg: 92.5219
2023/06/16 15:22:57 - mmengine - INFO - Iter(train) [ 6450/40000]  lr: 8.5511e-03  eta: 1:35:50  time: 0.1682  data_time: 0.0025  memory: 5931  loss: 0.2201  decode.loss_ce: 0.1429  decode.acc_seg: 93.6677  aux.loss_ce: 0.0771  aux.acc_seg: 87.2855
2023/06/16 15:23:06 - mmengine - INFO - Iter(train) [ 6500/40000]  lr: 8.5398e-03  eta: 1:35:40  time: 0.1674  data_time: 0.0022  memory: 5931  loss: 0.2171  decode.loss_ce: 0.1378  decode.acc_seg: 94.7125  aux.loss_ce: 0.0793  aux.acc_seg: 92.0175
2023/06/16 15:23:14 - mmengine - INFO - Iter(train) [ 6550/40000]  lr: 8.5284e-03  eta: 1:35:29  time: 0.1673  data_time: 0.0022  memory: 5931  loss: 0.1908  decode.loss_ce: 0.1234  decode.acc_seg: 97.3773  aux.loss_ce: 0.0674  aux.acc_seg: 97.1793
2023/06/16 15:23:23 - mmengine - INFO - Iter(train) [ 6600/40000]  lr: 8.5171e-03  eta: 1:35:19  time: 0.1675  data_time: 0.0021  memory: 5931  loss: 0.2268  decode.loss_ce: 0.1509  decode.acc_seg: 82.7862  aux.loss_ce: 0.0759  aux.acc_seg: 75.1383
2023/06/16 15:23:31 - mmengine - INFO - Iter(train) [ 6650/40000]  lr: 8.5058e-03  eta: 1:35:08  time: 0.1679  data_time: 0.0023  memory: 5931  loss: 0.1974  decode.loss_ce: 0.1242  decode.acc_seg: 95.4920  aux.loss_ce: 0.0732  aux.acc_seg: 91.6011
2023/06/16 15:23:39 - mmengine - INFO - Iter(train) [ 6700/40000]  lr: 8.4944e-03  eta: 1:34:58  time: 0.1676  data_time: 0.0023  memory: 5931  loss: 0.2400  decode.loss_ce: 0.1538  decode.acc_seg: 92.7746  aux.loss_ce: 0.0862  aux.acc_seg: 83.7892
2023/06/16 15:23:48 - mmengine - INFO - Iter(train) [ 6750/40000]  lr: 8.4831e-03  eta: 1:34:47  time: 0.1682  data_time: 0.0023  memory: 5931  loss: 0.1860  decode.loss_ce: 0.1171  decode.acc_seg: 97.3810  aux.loss_ce: 0.0689  aux.acc_seg: 97.2209
2023/06/16 15:23:56 - mmengine - INFO - Iter(train) [ 6800/40000]  lr: 8.4717e-03  eta: 1:34:37  time: 0.1678  data_time: 0.0021  memory: 5931  loss: 0.2239  decode.loss_ce: 0.1473  decode.acc_seg: 95.7399  aux.loss_ce: 0.0766  aux.acc_seg: 93.1760
2023/06/16 15:24:05 - mmengine - INFO - Iter(train) [ 6850/40000]  lr: 8.4604e-03  eta: 1:34:27  time: 0.1674  data_time: 0.0021  memory: 5931  loss: 0.3055  decode.loss_ce: 0.1937  decode.acc_seg: 94.3015  aux.loss_ce: 0.1118  aux.acc_seg: 88.8220
2023/06/16 15:24:13 - mmengine - INFO - Iter(train) [ 6900/40000]  lr: 8.4490e-03  eta: 1:34:17  time: 0.1675  data_time: 0.0023  memory: 5931  loss: 0.2412  decode.loss_ce: 0.1471  decode.acc_seg: 88.8797  aux.loss_ce: 0.0941  aux.acc_seg: 67.6873
2023/06/16 15:24:21 - mmengine - INFO - Iter(train) [ 6950/40000]  lr: 8.4377e-03  eta: 1:34:07  time: 0.1675  data_time: 0.0023  memory: 5931  loss: 0.2188  decode.loss_ce: 0.1431  decode.acc_seg: 95.1086  aux.loss_ce: 0.0756  aux.acc_seg: 94.7514
2023/06/16 15:24:30 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_151549
2023/06/16 15:24:30 - mmengine - INFO - Iter(train) [ 7000/40000]  lr: 8.4263e-03  eta: 1:33:57  time: 0.1677  data_time: 0.0023  memory: 5931  loss: 0.1918  decode.loss_ce: 0.1217  decode.acc_seg: 96.6982  aux.loss_ce: 0.0701  aux.acc_seg: 96.6545
2023/06/16 15:24:38 - mmengine - INFO - Iter(train) [ 7050/40000]  lr: 8.4150e-03  eta: 1:33:47  time: 0.1674  data_time: 0.0022  memory: 5931  loss: 0.2842  decode.loss_ce: 0.2036  decode.acc_seg: 97.0401  aux.loss_ce: 0.0806  aux.acc_seg: 96.5014
2023/06/16 15:24:47 - mmengine - INFO - Iter(train) [ 7100/40000]  lr: 8.4036e-03  eta: 1:33:37  time: 0.1681  data_time: 0.0024  memory: 5931  loss: 0.1568  decode.loss_ce: 0.1077  decode.acc_seg: 96.3993  aux.loss_ce: 0.0491  aux.acc_seg: 96.1629
2023/06/16 15:24:55 - mmengine - INFO - Iter(train) [ 7150/40000]  lr: 8.3923e-03  eta: 1:33:27  time: 0.1674  data_time: 0.0021  memory: 5931  loss: 0.1906  decode.loss_ce: 0.1211  decode.acc_seg: 97.7946  aux.loss_ce: 0.0695  aux.acc_seg: 97.7329
2023/06/16 15:25:04 - mmengine - INFO - Iter(train) [ 7200/40000]  lr: 8.3809e-03  eta: 1:33:18  time: 0.1679  data_time: 0.0023  memory: 5931  loss: 0.2026  decode.loss_ce: 0.1264  decode.acc_seg: 93.6935  aux.loss_ce: 0.0762  aux.acc_seg: 88.4418
2023/06/16 15:25:12 - mmengine - INFO - Iter(train) [ 7250/40000]  lr: 8.3695e-03  eta: 1:33:08  time: 0.1677  data_time: 0.0020  memory: 5931  loss: 0.1924  decode.loss_ce: 0.1248  decode.acc_seg: 97.4950  aux.loss_ce: 0.0676  aux.acc_seg: 96.9698
2023/06/16 15:25:20 - mmengine - INFO - Iter(train) [ 7300/40000]  lr: 8.3582e-03  eta: 1:32:58  time: 0.1674  data_time: 0.0022  memory: 5931  loss: 0.1838  decode.loss_ce: 0.1284  decode.acc_seg: 94.9481  aux.loss_ce: 0.0554  aux.acc_seg: 93.4011
2023/06/16 15:25:29 - mmengine - INFO - Iter(train) [ 7350/40000]  lr: 8.3468e-03  eta: 1:32:48  time: 0.1675  data_time: 0.0019  memory: 5932  loss: 0.2237  decode.loss_ce: 0.1452  decode.acc_seg: 98.3518  aux.loss_ce: 0.0785  aux.acc_seg: 97.8269
2023/06/16 15:25:37 - mmengine - INFO - Iter(train) [ 7400/40000]  lr: 8.3354e-03  eta: 1:32:39  time: 0.1682  data_time: 0.0023  memory: 5931  loss: 0.2178  decode.loss_ce: 0.1405  decode.acc_seg: 94.9177  aux.loss_ce: 0.0773  aux.acc_seg: 95.1295
2023/06/16 15:25:46 - mmengine - INFO - Iter(train) [ 7450/40000]  lr: 8.3241e-03  eta: 1:32:29  time: 0.1669  data_time: 0.0021  memory: 5931  loss: 0.2077  decode.loss_ce: 0.1391  decode.acc_seg: 96.4622  aux.loss_ce: 0.0686  aux.acc_seg: 95.8458
2023/06/16 15:25:54 - mmengine - INFO - Iter(train) [ 7500/40000]  lr: 8.3127e-03  eta: 1:32:19  time: 0.1679  data_time: 0.0021  memory: 5931  loss: 0.2531  decode.loss_ce: 0.1662  decode.acc_seg: 96.2435  aux.loss_ce: 0.0869  aux.acc_seg: 96.8042
2023/06/16 15:26:02 - mmengine - INFO - Iter(train) [ 7550/40000]  lr: 8.3013e-03  eta: 1:32:10  time: 0.1676  data_time: 0.0020  memory: 5931  loss: 0.1812  decode.loss_ce: 0.1172  decode.acc_seg: 96.3985  aux.loss_ce: 0.0641  aux.acc_seg: 95.2765
2023/06/16 15:26:11 - mmengine - INFO - Iter(train) [ 7600/40000]  lr: 8.2900e-03  eta: 1:32:00  time: 0.1669  data_time: 0.0022  memory: 5931  loss: 0.1642  decode.loss_ce: 0.1099  decode.acc_seg: 91.7126  aux.loss_ce: 0.0544  aux.acc_seg: 90.6947
2023/06/16 15:26:19 - mmengine - INFO - Iter(train) [ 7650/40000]  lr: 8.2786e-03  eta: 1:31:50  time: 0.1671  data_time: 0.0020  memory: 5931  loss: 0.1960  decode.loss_ce: 0.1216  decode.acc_seg: 93.6112  aux.loss_ce: 0.0744  aux.acc_seg: 86.0013
2023/06/16 15:26:28 - mmengine - INFO - Iter(train) [ 7700/40000]  lr: 8.2672e-03  eta: 1:31:41  time: 0.1680  data_time: 0.0022  memory: 5931  loss: 0.3738  decode.loss_ce: 0.2470  decode.acc_seg: 95.1929  aux.loss_ce: 0.1267  aux.acc_seg: 94.0888
2023/06/16 15:26:36 - mmengine - INFO - Iter(train) [ 7750/40000]  lr: 8.2558e-03  eta: 1:31:32  time: 0.1678  data_time: 0.0022  memory: 5931  loss: 0.1528  decode.loss_ce: 0.1042  decode.acc_seg: 96.6874  aux.loss_ce: 0.0486  aux.acc_seg: 96.5608
2023/06/16 15:26:44 - mmengine - INFO - Iter(train) [ 7800/40000]  lr: 8.2444e-03  eta: 1:31:23  time: 0.1711  data_time: 0.0021  memory: 5932  loss: 0.2090  decode.loss_ce: 0.1324  decode.acc_seg: 92.0971  aux.loss_ce: 0.0765  aux.acc_seg: 89.5352
2023/06/16 15:26:53 - mmengine - INFO - Iter(train) [ 7850/40000]  lr: 8.2331e-03  eta: 1:31:14  time: 0.1685  data_time: 0.0021  memory: 5931  loss: 0.2047  decode.loss_ce: 0.1252  decode.acc_seg: 96.7999  aux.loss_ce: 0.0794  aux.acc_seg: 96.4366
2023/06/16 15:27:01 - mmengine - INFO - Iter(train) [ 7900/40000]  lr: 8.2217e-03  eta: 1:31:05  time: 0.1718  data_time: 0.0022  memory: 5931  loss: 0.1561  decode.loss_ce: 0.1017  decode.acc_seg: 95.7117  aux.loss_ce: 0.0544  aux.acc_seg: 91.4173
2023/06/16 15:27:10 - mmengine - INFO - Iter(train) [ 7950/40000]  lr: 8.2103e-03  eta: 1:30:56  time: 0.1684  data_time: 0.0023  memory: 5931  loss: 0.1612  decode.loss_ce: 0.1076  decode.acc_seg: 92.6189  aux.loss_ce: 0.0536  aux.acc_seg: 87.6431
2023/06/16 15:27:18 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_WaterMelon-512x1024_20230616_151549
2023/06/16 15:27:18 - mmengine - INFO - Iter(train) [ 8000/40000]  lr: 8.1989e-03  eta: 1:30:47  time: 0.1684  data_time: 0.0023  memory: 5931  loss: 0.1405  decode.loss_ce: 0.0931  decode.acc_seg: 95.7189  aux.loss_ce: 0.0474  aux.acc_seg: 94.7967
2023/06/16 15:27:18 - mmengine - INFO - Saving checkpoint at 8000 iterations
2023/06/16 15:27:30 - mmengine - INFO - per class results:
2023/06/16 15:27:30 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 91.62 | 92.25 |
|    red     | 93.15 | 98.63 |
|   green    | 77.02 | 98.34 |
|   white    | 76.56 | 81.78 |
| seed_black | 72.98 | 88.02 |
| seed_white | 19.19 | 19.42 |
+------------+-------+-------+
2023/06/16 15:27:30 - mmengine - INFO - Iter(val) [17/17]    aAcc: 94.0900  mIoU: 71.7500  mAcc: 79.7400  data_time: 0.1216  time: 0.6385
2023/06/16 15:27:39 - mmengine - INFO - Iter(train) [ 8050/40000]  lr: 8.1875e-03  eta: 1:30:38  time: 0.1680  data_time: 0.0024  memory: 5932  loss: 0.1579  decode.loss_ce: 0.1010  decode.acc_seg: 95.8885  aux.loss_ce: 0.0569  aux.acc_seg: 95.5784
2023/06/16 15:27:47 - mmengine - INFO - Iter(train) [ 8100/40000]  lr: 8.1761e-03  eta: 1:30:29  time: 0.1677  data_time: 0.0023  memory: 5932  loss: 0.2149  decode.loss_ce: 0.1495  decode.acc_seg: 95.2743  aux.loss_ce: 0.0654  aux.acc_seg: 93.6813
2023/06/16 15:27:56 - mmengine - INFO - Iter(train) [ 8150/40000]  lr: 8.1647e-03  eta: 1:30:20  time: 0.1702  data_time: 0.0023  memory: 5932  loss: 0.3886  decode.loss_ce: 0.2693  decode.acc_seg: 92.8382  aux.loss_ce: 0.1192  aux.acc_seg: 92.8290
2023/06/16 15:28:04 - mmengine - INFO - Iter(train) [ 8200/40000]  lr: 8.1533e-03  eta: 1:30:12  time: 0.1678  data_time: 0.0026  memory: 5932  loss: 0.2045  decode.loss_ce: 0.1413  decode.acc_seg: 87.7708  aux.loss_ce: 0.0631  aux.acc_seg: 89.3757
2023/06/16 15:28:13 - mmengine - INFO - Iter(train) [ 8250/40000]  lr: 8.1419e-03  eta: 1:30:03  time: 0.1677  data_time: 0.0023  memory: 5932  loss: 0.2553  decode.loss_ce: 0.1644  decode.acc_seg: 92.5310  aux.loss_ce: 0.0910  aux.acc_seg: 89.8560
2023/06/16 15:28:21 - mmengine - INFO - Iter(train) [ 8300/40000]  lr: 8.1305e-03  eta: 1:29:54  time: 0.1686  data_time: 0.0026  memory: 5932  loss: 0.2045  decode.loss_ce: 0.1263  decode.acc_seg: 93.6553  aux.loss_ce: 0.0783  aux.acc_seg: 94.5775
2023/06/16 15:28:30 - mmengine - INFO - Iter(train) [ 8350/40000]  lr: 8.1191e-03  eta: 1:29:45  time: 0.1677  data_time: 0.0023  memory: 5932  loss: 0.2823  decode.loss_ce: 0.1906  decode.acc_seg: 98.3436  aux.loss_ce: 0.0917  aux.acc_seg: 98.1702
2023/06/16 15:28:38 - mmengine - INFO - Iter(train) [ 8400/40000]  lr: 8.1077e-03  eta: 1:29:36  time: 0.1680  data_time: 0.0024  memory: 5931  loss: 0.2192  decode.loss_ce: 0.1393  decode.acc_seg: 93.3401  aux.loss_ce: 0.0798  aux.acc_seg: 93.3724
2023/06/16 15:28:47 - mmengine - INFO - Iter(train) [ 8450/40000]  lr: 8.0963e-03  eta: 1:29:27  time: 0.1678  data_time: 0.0022  memory: 5932  loss: 0.1753  decode.loss_ce: 0.1096  decode.acc_seg: 95.5060  aux.loss_ce: 0.0657  aux.acc_seg: 95.1239
2023/06/16 15:28:55 - mmengine - INFO - Iter(train) [ 8500/40000]  lr: 8.0849e-03  eta: 1:29:18  time: 0.1680  data_time: 0.0020  memory: 5932  loss: 0.1692  decode.loss_ce: 0.1151  decode.acc_seg: 92.8936  aux.loss_ce: 0.0542  aux.acc_seg: 91.9921
2023/06/16 15:29:03 - mmengine - INFO - Iter(train) [ 8550/40000]  lr: 8.0735e-03  eta: 1:29:10  time: 0.1707  data_time: 0.0023  memory: 5932  loss: 0.1759  decode.loss_ce: 0.1156  decode.acc_seg: 95.7930  aux.loss_ce: 0.0602  aux.acc_seg: 95.5204
2023/06/16 15:29:12 - mmengine - INFO - Iter(train) [ 8600/40000]  lr: 8.0621e-03  eta: 1:29:01  time: 0.1689  data_time: 0.0024  memory: 5932  loss: 0.1957  decode.loss_ce: 0.1337  decode.acc_seg: 97.7997  aux.loss_ce: 0.0619  aux.acc_seg: 97.5862
2023/06/16 15:29:21 - mmengine - INFO - Iter(train) [ 8650/40000]  lr: 8.0507e-03  eta: 1:28:53  time: 0.1739  data_time: 0.0031  memory: 5932  loss: 0.1477  decode.loss_ce: 0.0992  decode.acc_seg: 95.6822  aux.loss_ce: 0.0485  aux.acc_seg: 95.1736
2023/06/16 15:29:29 - mmengine - INFO - Iter(train) [ 8700/40000]  lr: 8.0393e-03  eta: 1:28:47  time: 0.1759  data_time: 0.0032  memory: 5932  loss: 0.1247  decode.loss_ce: 0.0851  decode.acc_seg: 96.4242  aux.loss_ce: 0.0396  aux.acc_seg: 96.1955
2023/06/16 15:29:38 - mmengine - INFO - Iter(train) [ 8750/40000]  lr: 8.0279e-03  eta: 1:28:40  time: 0.1718  data_time: 0.0030  memory: 5932  loss: 0.3001  decode.loss_ce: 0.2033  decode.acc_seg: 96.2357  aux.loss_ce: 0.0968  aux.acc_seg: 95.3540
2023/06/16 15:29:47 - mmengine - INFO - Iter(train) [ 8800/40000]  lr: 8.0164e-03  eta: 1:28:33  time: 0.1774  data_time: 0.0032  memory: 5932  loss: 0.2053  decode.loss_ce: 0.1286  decode.acc_seg: 93.8973  aux.loss_ce: 0.0767  aux.acc_seg: 85.0862
2023/06/16 15:29:56 - mmengine - INFO - Iter(train) [ 8850/40000]  lr: 8.0050e-03  eta: 1:28:26  time: 0.1773  data_time: 0.0034  memory: 5932  loss: 0.2785  decode.loss_ce: 0.1846  decode.acc_seg: 95.3931  aux.loss_ce: 0.0940  aux.acc_seg: 94.5538
